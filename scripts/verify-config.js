#!/usr/bin/env node

/**
 * Script de v√©rification de la configuration du d√©p√¥t
 * V√©rifie que tout est pr√™t pour le d√©ploiement
 */

const fs = require('fs');
const path = require('path');

const CHECKS = {
  success: '‚úÖ',
  error: '‚ùå',
  warning: '‚ö†Ô∏è',
  info: '‚ÑπÔ∏è'
};

let hasErrors = false;
let hasWarnings = false;

console.log('\nüîç V√©rification de la configuration du d√©p√¥t...\n');

// V√©rifier la structure des dossiers
console.log('üìÅ Structure des dossiers:');

const requiredDirs = [
  'packages/geo-map',
  'packages/geo-map/src',
  'packages/geo-map/public',
  'scripts',
  '.github/workflows'
];

requiredDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    console.log(`  ${CHECKS.success} ${dir}`);
  } else {
    console.log(`  ${CHECKS.error} ${dir} - MANQUANT`);
    hasErrors = true;
  }
});

// V√©rifier les fichiers essentiels
console.log('\nüìÑ Fichiers essentiels:');

const requiredFiles = [
  { path: 'package.json', required: true },
  { path: 'packages/geo-map/package.json', required: true },
  { path: 'packages/geo-map/src/index.js', required: true },
  { path: 'packages/geo-map/public/index.html', required: true },
  { path: 'scripts/build-manifest.js', required: true },
  { path: 'scripts/prepare-dist.js', required: true },
  { path: '.github/workflows/deploy.yml', required: true },
  { path: 'packages/geo-map/package-lock.json', required: false }
];

requiredFiles.forEach(({ path: filePath, required }) => {
  if (fs.existsSync(filePath)) {
    console.log(`  ${CHECKS.success} ${filePath}`);
  } else {
    if (required) {
      console.log(`  ${CHECKS.error} ${filePath} - MANQUANT`);
      hasErrors = true;
    } else {
      console.log(`  ${CHECKS.warning} ${filePath} - Manquant (optionnel)`);
      hasWarnings = true;
    }
  }
});

// V√©rifier le contenu des package.json
console.log('\nüì¶ Configuration des packages:');

try {
  const rootPkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  if (rootPkg.scripts && rootPkg.scripts['prepare-dist']) {
    console.log(`  ${CHECKS.success} Script prepare-dist trouv√©`);
  } else {
    console.log(`  ${CHECKS.error} Script prepare-dist manquant`);
    hasErrors = true;
  }

  if (rootPkg.devDependencies && rootPkg.devDependencies['fs-extra']) {
    console.log(`  ${CHECKS.success} D√©pendance fs-extra trouv√©e`);
  } else {
    console.log(`  ${CHECKS.error} D√©pendance fs-extra manquante`);
    hasErrors = true;
  }
} catch (err) {
  console.log(`  ${CHECKS.error} Erreur de lecture du package.json racine`);
  hasErrors = true;
}

try {
  const widgetPkg = JSON.parse(fs.readFileSync('packages/geo-map/package.json', 'utf8'));
  
  if (widgetPkg.scripts && widgetPkg.scripts.build) {
    console.log(`  ${CHECKS.success} Script build trouv√© dans geo-map`);
  } else {
    console.log(`  ${CHECKS.error} Script build manquant dans geo-map`);
    hasErrors = true;
  }

  if (widgetPkg.dependencies && widgetPkg.dependencies['grist-plugin-api']) {
    console.log(`  ${CHECKS.success} grist-plugin-api install√©`);
  } else {
    console.log(`  ${CHECKS.error} grist-plugin-api manquant`);
    hasErrors = true;
  }
} catch (err) {
  console.log(`  ${CHECKS.error} Erreur de lecture du package.json de geo-map`);
  hasErrors = true;
}

// V√©rifier le workflow GitHub Actions
console.log('\n‚öôÔ∏è Workflow GitHub Actions:');

try {
  const workflow = fs.readFileSync('.github/workflows/deploy.yml', 'utf8');
  
  if (workflow.includes('actions/checkout@v4')) {
    console.log(`  ${CHECKS.success} Action checkout configur√©e`);
  }
  
  if (workflow.includes('actions/setup-node@v4')) {
    console.log(`  ${CHECKS.success} Action setup-node configur√©e`);
  }
  
  if (workflow.includes('actions/configure-pages@v4')) {
    console.log(`  ${CHECKS.success} Action configure-pages configur√©e`);
  }
  
  if (workflow.includes('actions/deploy-pages@v4')) {
    console.log(`  ${CHECKS.success} Action deploy-pages configur√©e`);
  }
  
  if (workflow.includes('npm run prepare-dist')) {
    console.log(`  ${CHECKS.success} √âtape prepare-dist pr√©sente`);
  } else {
    console.log(`  ${CHECKS.error} √âtape prepare-dist manquante`);
    hasErrors = true;
  }
} catch (err) {
  console.log(`  ${CHECKS.error} Erreur de lecture du workflow`);
  hasErrors = true;
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
if (hasErrors) {
  console.log(`\n${CHECKS.error} Des erreurs ont √©t√© d√©tect√©es. Veuillez les corriger avant de d√©ployer.`);
  process.exit(1);
} else if (hasWarnings) {
  console.log(`\n${CHECKS.warning} Configuration correcte avec quelques avertissements.`);
  console.log(`${CHECKS.info} Le d√©ploiement devrait fonctionner.`);
} else {
  console.log(`\n${CHECKS.success} Toutes les v√©rifications sont pass√©es !`);
  console.log(`${CHECKS.info} Le d√©p√¥t est pr√™t pour le d√©ploiement.`);
}

console.log('\nüìù Prochaines √©tapes:');
console.log('  1. Activez GitHub Pages (Settings ‚Üí Pages ‚Üí Source: GitHub Actions)');
console.log('  2. Poussez vos changements sur main');
console.log('  3. Surveillez l\'onglet Actions pour le d√©ploiement');
console.log('  4. Une fois d√©ploy√©, testez: https://nic01asfr.github.io/grist-widgets/manifest.json\n');
